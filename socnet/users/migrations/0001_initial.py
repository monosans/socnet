# Generated by Django 4.1.1 on 2022-09-20 18:22
from __future__ import annotations

import re

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import socnet.core.fields
import socnet.users.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [("auth", "0012_alter_user_first_name_max_length")]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text=(
                            "Designates that this user has all permissions"
                            " without explicitly assigning them."
                        ),
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text=(
                            "Designates whether the user can log into this"
                            " admin site."
                        ),
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "Designates whether this user should be treated as"
                            " active. Unselect this instead of deleting"
                            " accounts."
                        ),
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        error_messages={
                            "unique": (
                                "A user with that username already exists."
                            )
                        },
                        help_text=(
                            "No more than 30 characters. Only English letters,"
                            " numbers and _. Must begin with a letter and end"
                            " with a letter or number."
                        ),
                        max_length=30,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(?:[A-Za-z]|[A-Za-z][\\dA-Z_a-z]*[\\dA-Za-z])$"
                            )
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "No more than 30 characters. Only English and"
                            " Russian letters and -."
                        ),
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^(?:[\\-A-Za-z]+|[\\-ЁА-яё]+)$")
                            )
                        ],
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "No more than 30 characters. Only English and"
                            " Russian letters and -."
                        ),
                        max_length=30,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^(?:[\\-A-Za-z]+|[\\-ЁА-яё]+)$")
                            )
                        ],
                        verbose_name="last name",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            socnet.users.validators.validate_birth_date
                        ],
                        verbose_name="birth date",
                    ),
                ),
                (
                    "location",
                    socnet.core.fields.NormalizedCharField(
                        blank=True, max_length=128, verbose_name="location"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        upload_to="user_images/",
                        verbose_name="image",
                    ),
                ),
                (
                    "about",
                    socnet.core.fields.NormalizedTextField(
                        blank=True, max_length=4096, verbose_name="about me"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text=(
                            "The groups this user belongs to. A user will get"
                            " all permissions granted to each of their groups."
                        ),
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "subscriptions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="subscribers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="subscriptions",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager())],
        )
    ]
