[tool.poetry]
name = "socnet"
version = "0"
description = ""
license = "MIT"
authors = ["monosans <hsyqixco@protonmail.com>"]
repository = "https://github.com/monosans/socnet"
classifiers = ["Private :: Do Not Upload"]

[tool.poetry.dependencies]
python = "^3.8"
channels = "4.0.0"
channels-redis = "4.1.0"
Django = { version = "4.2.6", extras = ["argon2"] }
django-allauth = { version = "0.57.0", extras = ["mfa"] }
django-bootstrap5 = "23.3"
django-cleanup = "8.0.0"
django-environ = "0.11.2"
django-filter = "23.3"
django-logentry-admin = "1.1.0"
django-stubs-ext = "4.2.5"
djangorestframework = "3.14.0"
docutils = "0.20.1"
drf-spectacular = "0.26.5"
drf-standardized-errors = { version = "0.12.5", extras = ["openapi"] }
httptools = "0.6.1"
Pillow = "10.1.0"
sentry-sdk = { version = "1.32.0", extras = ["django"] }
socnet-rs = { path = "socnet_rs", develop = false }
typing-extensions = "4.8.0"
uvicorn = "0.23.2"
uvloop = { version = "0.18.0", markers = "implementation_name == 'cpython' and (sys_platform == 'darwin' or sys_platform == 'linux')" }
websockets = "11.0.3"

[tool.poetry.group.local.dependencies]
black = "23.10.0"
covdefaults = "2.3.0"
debugpy = "1.8.0"
django-coverage-plugin = "3.1.0"
django-debug-toolbar = "4.2.0"
django-extra-checks = "0.13.3"
django-stubs = { version = "4.2.5", extras = ["compatible-mypy"] }
djangorestframework-stubs = { version = "3.14.4", extras = ["compatible-mypy"] }
djlint = "1.34.0"
factory-boy = "3.3.0"
mypy = "1.6.1"
pre-commit = "3.5.0"
psycopg = { version = "3.1.12", extras = ["binary"] }
pytest = "7.4.2"
pytest-cov = "4.1.0"
pytest-django = "4.5.2"
ruff = "0.1.0"
types-Pillow = "10.1.0.0"
watchfiles = "0.21.0"

[tool.poetry.group.production.dependencies]
gunicorn = "21.2.0"
psycopg = { version = "3.1.12", extras = ["c"] }
redis = { version = "5.0.1", extras = ["hiredis"] }

[tool.black]
line-length = 80
target-version = ["py38"]
skip-magic-trailing-comma = true
preview = true

[tool.coverage.report]
exclude_lines = [
  "^\\s*@(?:abc\\.)?abstractmethod$",
  "^\\s*if\\s+(?:settings\\.)?DEBUG\\s*:$",
]
fail_under = 75

[tool.coverage.run]
omit = [
  ".venv/*",
  "node_modules/*",
  "config/asgi.py",
  "config/settings/local.py",
  "config/settings/production.py",
  "config/wsgi.py",
  "manage.py",
]
plugins = ["covdefaults", "django_coverage_plugin"]

[tool.django-stubs]
django_settings_module = "config.settings.test"

[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
ignore = "H006,H013,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 80
profile = "django"

[tool.mypy]
python_version = "3.8"
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
warn_unreachable = true
local_partial_types = true
enable_error_code = [
  "redundant-self",
  "redundant-expr",
  "possibly-undefined",
  "truthy-bool",
  "truthy-iterable",
  "ignore-without-code",
  "unused-awaitable",
]
strict = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[[tool.mypy.overrides]]
module = [
  "allauth.*",
  "channels.*",
  "channels_redis.*",
  "debug_toolbar.*",
  "django_filters.*",
  "environ.*",
  "factory.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.test"
FAIL_INVALID_TEMPLATE_VARS = true
addopts = ["--strict-config", "--strict-markers"]
xfail_strict = true

[tool.ruff]
ignore = [
  "ANN",
  "BLE001",
  "C901",
  "COM",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D203",
  "D205",
  "D212",
  "D213",
  "D400",
  "D401",
  "D407",
  "D415",
  "D417",
  "DJ008",
  "ERA001",
  "FBT002",
  "PD901",
  "PERF203",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "PT012",
  "RUF001",
  "RUF002",
  "RUF003",
  "RUF012",
  "RUF013",
  "S110",
  "S112",
  "S308",
  "S311",
  "SIM105",
  "TCH001",
  "TCH002",
  "TCH003",
  "TID252",
  "TRY400",
]
ignore-init-module-imports = true
line-length = 80
select = ["ALL"]
target-version = "py38"

[tool.ruff.per-file-ignores]
"config/settings/*" = ["F403", "F405"]
"docker/django/gunicorn_config.py" = ["INP001"]
"socnet/*/migrations/*" = ["SLF001"]
"tests/*" = ["PLR2004", "S101", "S105", "S106", "S107"]

[tool.ruff.flake8-gettext]
extend-function-names = [
  "pgettext",
  "gettext_lazy",
  "pgettext_lazy",
  "npgettext",
  "ngettext_lazy",
  "npgettext_lazy",
]

[tool.ruff.flake8-self]
ignore-names = ["_meta"]

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
